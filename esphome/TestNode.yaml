# Insert your SSID and Your PWD after inital setup
wifi:
  ap:
    ssid: rfidreader

substitutions:
  devicename: tagreader
  upper_devicename: TagReader

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini

# If buzzer is enabled, notify on api connection success
  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    - if:
        condition:
          switch.is_on: buzzer_enabled
        then:
        - rtttl.play: "success:d=24,o=5,b=100:c,g,b"

# Define switches to control LED and buzzer from HA
switch:
- platform: template
  name: "${upper_devicename} Buzzer Enabled"
  id: buzzer_enabled
  icon: mdi:volume-high
  optimistic: true
- platform: template
  name: "${upper_devicename} LED enabled"
  id: led_enabled
  icon: mdi:alarm-light-outline
  optimistic: true

# Enable the captive portal for inital WiFi setup
captive_portal:

# Enable logging
logger:
  baud_rate: 9600

# Enable Home Assistant API
api:
  password: !secret ESP_API_PWD
  services:
  - service: rfidreader_tag_ok
    then:
    - rtttl.play: "beep:d=16,o=5,b=100:b"

  - service: rfidreader_tag_ko
    then:
    - rtttl.play: "beep:d=8,o=5,b=100:b"

# Enable OTA upgrade
ota:
  password: !secret ESP_OTA_PWD

# Enable SPI interface
spi:
  clk_pin: TX
  miso_pin: D1
  mosi_pin: D2

# Configure the PN532 module
pn532:
  cs_pin: D3
  update_interval: 2s

  # What happens when a tag is read
  on_tag:
    then:
    - homeassistant.event:
        event: esphome.tag_scanned
        data:
          tag_id: !lambda 'return x;'
    - if:
        condition:
          switch.is_on: buzzer_enabled
        then:
        - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
    - if:
        condition:
          switch.is_on: led_enabled
        then:
        - light.turn_on:
            id: activity_led
            brightness: 100%
            red: 0%
            green: 100%
            blue: 0%
            flash_length: 500ms

# Define the buzzer output
output:
- platform: esp8266_pwm
  pin: D8
  id: buzzer

# Define buzzer as output for RTTTL
rtttl:
  output: buzzer

# Configure LED
light:
- platform: fastled_clockless
  chipset: WS2812
  pin: D7
  default_transition_length: 10ms
  num_leds: 1
  rgb_order: GRB
  id: activity_led
  name: "${upper_devicename} LED"
  restore_mode: ALWAYS_OFF